	 1	module FiniteStateMachine (output reg out_z, input in_x, in_y, clk, reset_b);
     2		reg [1:0] state, next_state;
     3		always @(posedge clk, negedge reset_b) begin
     4			if(reset_b == 1'b0)
     5				state = 2'b00;
     6			else
     7				state <= next_state;
     8		end
     9		
    10		always @ (state, in_x, in_y) begin 
    11			if ({in_x, in_y} == 2'b00||{in_x, in_y} == 2'b01) begin
    12					next_state = 2'b00;
    13			end
    14			else if ({in_x, in_y} == 2'b11 && state == 2'b00) begin
    15					next_state = 2'b01;
    16			end
    17			else if (({in_x, in_y} == 2'b10||{in_x, in_y} == 2'b11) && state == 2'b01) begin
    18					next_state = 2'b10;
    19			end
    20			else if (({in_x, in_y} == 2'b10 && state == 2'b00)||((state == 2'b10 ||state==2'b11)&&({in_x, in_y} == 2'b10||{in_x, in_y} == 2'b11))) begin
    21					next_state = 2'b11;
    22			end
    23		
    24			if(state==2'b00||state==2'b01) begin
    25				out_z = 1'b0;
    26			end
    27			else begin 
    28				out_z = 1'b1;
    29			end
    30		end
    31	endmodule